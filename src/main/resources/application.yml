 server:
    port: 9090

 simulator:

   #default: 100
   events-per-second: 100000000

   #How many hosts you want simulate for each metric being generated. This will map to the Envelope index and ip (each resource gets an unique IP from the simulator)
   #Add as many resources as you would like to have as sources of metrics
   #Note that you need to have the resources declared in this section if you want to use them on metrics declaration bellow
   resources:
     - name: router
       size: 2
     - name: dea
       size: 8
     - name: nats
       size: 2

   # Yaml Polymorphic collections is not easy to grasp, this is why each metric is represented as a high level entity
   counterEvent:
    # List of resources you want to emit this type of metric.
    resources: ["nats"]
    #Weight of this metric compared to other metrics in this simulation
    weight: 2
    # A list of possible CounterEvent metrics that will be generated for each time simulation.data() is called
    metrics:
      - name: "messages.sent"
        min: 0
        max: 100
        weight: 1


   valueMetric:
    # List of resources from the resourcePool you want to generate metrics from
    resources: ["router","dea","nats"]
    weight: 3
    #List of all possible metrics that can be created for this type
    metrics:
      - name: cpu
        min: 0
        max: 100
        weight: 10
        unit: "percent"
      - name: memory
        min: 1048576
        max: 4294967296
        weight: 10
        unit: "B"
      - name: openfiles
        min: 1
        max: 1024
        weight: 1
        unit: "unit"


   containerMetric:
    resources: ["dea"]
    weight: 2
    applicationId:
      size: 5
    cpuPercentage:
      min: 0
      max: 100
    memoryBytes:
      min: 1048576
      max: 4294967296
    diskBytes:
      min: 1048576
      max: 4294967296


   logMessage:
    resources: ["router","dea"]
    weight: 1
    message: "2015-06-17 19:02:46.763  INFO 35181 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@73a1e9a9: startup date [Wed Jun 17 19:02:46 EDT 2015]; root of context hierarchy"
    messageType: ["OUT","ERR"]
    #UUID type, size means how many distinct values should be generated
    appId:
      size: 5


   httpStartStop:
     resources: ["router"]
     weight: 5
     applicationId:
       size: 10
     uri: ["/search","/create","/favicon"]
     #optional, if not provided, only 200's will be generated
     statusCode:
       - name: 200
         weight: 100
       - name: 201
         weight: 50
       - name: 404
         weight: 2
       - name: 503
         weight: 1
     #optional, if not provided, all methods will be generated with equal weights
     method:
       - name: GET
         weight: 100
       - name: POST
         weight: 50
       - name: DELETE
         weight: 10
       - name: PUT
         weight: 20
     contentLenght:
       min: 32
       max: 1024
     #optional, if not provided both types will be generated with equal weights
     peerType:
       - name: client
         weight: 100
       - name: server
         weight: 10
     #Response time in milliseconds to be set on HttpStop and HttpStartStop
     responseTime:
         min: 10
         max: 5000