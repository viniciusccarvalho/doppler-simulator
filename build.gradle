/*
 *
 *  Copyright 2015 original author or authors.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 */

buildscript {
    repositories {
        mavenLocal()
        maven { url "http://repo.spring.io/plugins-snapshot" }
        maven { url "http://repo.spring.io/release" }
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath 'ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.2'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.0.BUILD-SNAPSHOT")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'protobuf'

group = 'org.springframework.bus.firehose.simulator'
version = '1.0.0.BUILD-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
 protobufVersion = "2.6.1"
}

repositories {
    mavenLocal()
    maven { url "http://repo.spring.io/release" }
    mavenCentral()
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("com.google.protobuf:protobuf-java:$protobufVersion")
    compile("com.google.guava:guava:18.0")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    protobuf fileTree("proto/events/") {
            exclude "README.md"
    }
}

idea.module {
        excludeDirs -= file(buildDir)
        buildDir.listFiles({d,f->f != 'generated-sources'} as FilenameFilter).each {excludeDirs += it}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

